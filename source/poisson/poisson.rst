Introduction of Poisson Equation
==================================

Consider the Poisson equation 

.. math::
   :label: poisson

   \nabla^2 \phi = f

in Domain :math:`\Omega` with appropriate boundary conditions on :math:`\partial \Omega`. 

where,
:math:`f` is a source function. The symbol :math:`\nabla` is usually called **nabla operator**. 
:math:`\nabla^2 = \nabla \cdot \nabla = \Delta`. :math:`\Delta` is **Laplace operator** or second order differential operator.
where the symbol derive from formally writing:


.. math::
   :label: nabla_op

   \nabla = (\frac{\partial}{\partial x_1}, \ldots, \frac{\partial}{\partial x_n} )

.. math::
   :label: delta_op

   \Delta = \nabla \cdot \nabla = \frac{\partial^2}{\partial x_1^2} + \ldots + \frac{\partial^2}{\partial x_n^2} 

:eq:`poisson` can also be written as,

.. math::
   :label: poisson_expand

   \nabla^2 \phi = \frac{\partial^2 \phi}{\partial x^2} + \frac{\partial^2 \phi}{\partial y^2} + \frac{\partial^2 \phi}{\partial z^2} = f
 

Taylor Polynomial
-------------------------------

A Taylor polynomial of order k :math:`P_k(x)`, generated by :math:`f(x)` at :math:`x=a` is given by:

.. math::
    P_k(x) \approx f(a)+f^{\prime}(a)(x-a)+\frac{f^{\prime \prime}(a)}{2 !}(x-a)^2+\ldots+\frac{f^{(k)}(a)}{k !}(x-a)^k

:math:`P_k(x)` is consided as k-th order approximation of :math:`f(x)` at :math:`x=a`. 


Discretization by differential method
--------------------------------------

Discretization in One Dimension
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To explain the problem more clearly, let's consider the one-dimensional case first. 
Discretization of 1-dimensional space is given as points :math:`(x_0, x_1, ..., x_i, ..., x_n) \in \Omega^1`. 
Here, we generate a polynomial :math:`\Phi(x)` to proximate function :math:`\phi` in :eq:`poisson` at :math:`x = x_{i}`.

.. math::
    :label: phi_taylor

    \Phi(x)=\phi(x_i)
             &+\phi^{\prime}(x_i)(x-x_i)
             +\frac{\phi^{\prime \prime}(x_i)}{2 !}(x-x_i)^2 \\
             &+\ldots+\frac{\phi^{(n)}(x_i)}{n !}(x-x_i)^n, \quad n \to \infty

:math:`\phi(x_{i+1})` can be approximated by :eq:`phi_taylor`, :math:`k` is a finite number. 

.. math::
     \phi(x_{i+1}) &\approx \Phi_k(x_{i+1})\\
      &=\phi(x_i) +\phi^{\prime}(x_i)(x_{i+1}-x_i) \\
         &+\frac{\phi^{\prime \prime}(x_i)}{2 !}(x_{i+1}-x_i)^2
         +\ldots
         +\frac{\phi^{(k)}(x_i)}{k !}(x_{i+1}-x_i)^k
    
- :math:`k = 1`

.. math::
     \phi(x_{i+1}) \approx \phi(x_i) +\phi^{\prime}(x_i)(x_{i+1}-x_i)

- :math:`k = 2`

.. math::
     \phi(x_{i+1}) \approx &\phi(x_i) +\phi^{\prime}(x_i)(x_{i+1}-x_i) \\
                   &+\frac{\phi^{\prime \prime}(x_i)}{2 !}(x_{i+1}-x_i)^2

- :math:`k = 3`

.. math::
     \phi(x_{i+1}) \approx &\phi(x_i) +\phi^{\prime}(x_i)(x_{i+1}-x_i) \\
                   &+\frac{\phi^{\prime \prime}(x_i)}{2 !}(x_{i+1}-x_i)^2 \\
                   &+\frac{\phi^{(3)}(x_i)}{3 !}(x_{i+1}-x_i)^3

Discretization in 1-D Uniform Mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the space is discreted in a uniform grid, :math:`h = x_{i+1}-x_i`. Above equations can be simplified,

- :math:`k = 1`

.. math::
    :label: xpk1

     \phi(x_{i+1}) \approx \phi(x_i) +\phi^{\prime}(x_i) h

- :math:`k = 2`

.. math::
    :label: xpk2

     \phi(x_{i+1}) \approx \phi(x_i) +\phi^{\prime}(x_i) h 
                   +\frac{\phi^{\prime \prime}(x_i)}{2} h^2

- :math:`k = 3`

.. math::
    :label: xpk3

     \phi(x_{i+1}) \approx \phi(x_i) +\phi^{\prime}(x_i)h 
                   +\frac{\phi^{\prime \prime}(x_i)}{2}h^2 
                   +\frac{\phi^{(3)}(x_i)}{6}h^3

:math:`\phi_(x_{i-1})` can also be approximated by :eq:`phi_taylor`, where :math:`x_{i-1}-x_i = -h`. 

.. math::
     \phi(x_{i-1}) &\approx \Phi_k(x_{i-1})\\
      &=\phi(x_i) - \phi^{\prime}(x_i) h 
         +\frac{\phi^{\prime \prime}(x_i)}{2}h^2
         -\frac{\phi^{\prime \prime \prime}(x_i)}{3 !}h^3 + \ldots

- :math:`k = 1`

.. math::
    :label: xmk1

     \phi(x_{i-1}) \approx \phi(x_i) -\phi^{\prime}(x_i) h

- :math:`k = 2`

.. math::
    :label: xmk2

     \phi(x_{i-1}) \approx \phi(x_i) -\phi^{\prime}(x_i) h 
                   +\frac{\phi^{\prime \prime}(x_i)}{2} h^2

- :math:`k = 3`

.. math::
    :label: xmk3

     \phi(x_{i-1}) \approx \phi(x_i) -\phi^{\prime}(x_i)h 
                   +\frac{\phi^{\prime \prime}(x_i)}{2}h^2 
                   -\frac{\phi^{(3)}(x_i)}{6}h^3

First Order Derivative
~~~~~~~~~~~~~~~~~~~~~~~~
Derivative of :math:`\phi(x)` at :math:`x_i`, :math:`\phi^{\prime}(x_i)`, can be obtained in three ways.

- Forward, revise from :eq:`xpk1`

.. math::
    :label: dxpk1

    \phi^{\prime}(x_i) \approx \frac{\phi(x_{i+1}) -  \phi(x_i)}{h}

- Backward, revise from :eq:`xmk1`

.. math::
    :label: dxmk1

    \phi^{\prime}(x_i) \approx \frac{\phi(x_{i}) -  \phi(x_{i-1})}{h}

- Center, :eq:`xpk1` minus :eq:`xmk1`

.. math::
    :label: dxck1

    \phi(x_{i+1}) - \phi(x_{i+1}) &\approx 2h \phi^{\prime}(x_i) \\
    \phi^{\prime}(x_i) &\approx \frac{\phi(x_{i+1}) - \phi(x_{i+1})}{2h} \\

Here, we can introduce 1D difference operators which used in [Spotz1995]_ , summarized in :numref:`dop1d`

.. csv-table:: Definitions of 1D :math:`\delta`-Operator on a Uniform Mesh
   :header: "Name", "Operator", "Formula"
   :widths: 30, 30, 30
   :name: dop1d

   Center, :math:`\delta_x \phi_i`, :math:`\frac{\phi(x_{i+1}) - \phi(x_{i+1})}{2h}`
   Forward, :math:`\delta_x^+ \phi_i`, :math:`\frac{\phi(x_{i+1}) - \phi(x_{i})}{h}`
   Backward, :math:`\delta_x^- \phi_i`, :math:`\frac{\phi(x_{i}) - \phi(x_{i-1})}{h}`

Second Order Derivative
~~~~~~~~~~~~~~~~~~~~~~~~

Second Derivative of :math:`\phi(x)` at :math:`x_i`, :math:`\phi^{\prime \prime}(x_i)`, can be obtained by :eq:`xpk2` and :eq:`xmk2`.

.. math::
    :label: dxc2

    \phi(x_{i+1}) + \phi(x_{i-1}) &\approx 2 \phi(x_{i}) + 2 \frac{\phi^{\prime \prime}(x_i)}{2} h^2 \\
    2 \frac{\phi^{\prime \prime}(x_i)}{2} h^2  &\approx  \phi(x_{i+1}) + \phi(x_{i-1})  - 2 \phi(x_{i}) \\
    \phi^{\prime \prime}(x_i) &\approx \frac{ \phi(x_{i+1}) + \phi(x_{i-1})  - 2 \phi(x_{i})}{h^2} \\

- 2 Order :math:`\delta`-Operator 

.. math::
    :label: opd2 

    \delta^2_x \phi_i =  \frac{ \phi(x_{i+1})  - 2 \phi(x_{i}) + \phi(x_{i-1}) }{h^2}


Discretization in 2 and 3 Dimensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First Order Derivative in higher Dimensions are basicly same as in one dimension. 
Second order derivative is combination of 2nd derivatives on each dimension. For simplicity, subscript notation is adopted. We define
:math:`\phi_i = \phi(x_i)`, :math:`\phi_{i,j} = \phi(x_i, y_i)`, :math:`\phi_{i,j,k} = \phi(x_i, y_i, z_k)`.

- 2-D 2nd Order Derivative
.. math::

    \Delta \phi (x_i, y_j)  &=  \frac{\partial^2 \phi_{i,j}}{\partial x^2} + \frac{\partial^2 \phi_{i,j}}{\partial y^2} \\
                            & \approx \delta^2_x \phi_{i,j} + \delta^2_y \phi_{i,j} \\
                            & = \frac{ \phi_{i+1, j}  - 2 \phi_{i,j} + \phi_{i-1, j} }{h^2} + \frac{ \phi_{i, j+1}  - 2 \phi_{i,j} + \phi_{i, j - 1} }{h^2} \\
                            & = \frac{1}{h^2} (\phi_{i+1, j} + \phi_{i, j+1} - 4 \phi_{i,j} + \phi_{i-1, j} + \phi_{i, j-1})

.. _fig-d2d2:
.. figure:: fig/stencil_2d2d.png
    
    2nd Order Derivative in 2D space with corresponding matrix coefficients.


- 3-D 2nd Order Derivative
.. math::

    \Delta \phi (x_i, y_j, z_k)  &=  \frac{\partial^2 \phi_{i,j,k}}{\partial x^2} + \frac{\partial^2 \phi_{i,j,k}}{\partial y^2} + \frac{\partial^2 \phi_{i,j,k}}{\partial z^2} \\
                            & \approx \delta^2_x \phi_{i,j,k} + \delta^2_y \phi_{i,j,k} + \delta^2_z \phi_{i,j,k} \\
                            & = \frac{ \phi_{i+1, j, k}  - 2 \phi_{i,j,k} + \phi_{i-1, j, k} }{h^2} \\
                            & \quad + \frac{ \phi_{i, j+1,k}  - 2 \phi_{i,j,k} + \phi_{i, j - 1,k} }{h^2} \\
                            & \quad + \frac{ \phi_{i, j,k +1}  - 2 \phi_{i,j,k} + \phi_{i, j,k-1} }{h^2} \\
                            & = \frac{1}{h^2} ( \phi_{i+1, j,k} + \phi_{i, j+1,k} + \phi_{i, j,k + 1}  \\
                            & \quad \quad\quad - 6 \phi_{i,j,k} \\
                            & \quad \quad\quad + \phi_{i-1, j,k} + \phi_{i, j-1,k} + \phi_{i, j,k - 1} )


.. _fig-d2d3:
.. figure:: fig/stencil_2d3d.png
    
    2nd Order Derivative in 3D space with corresponding matrix coefficients.



derivatives on cell face, :math:`\frac{\partial \phi}{\partial x}\mid _{i + \frac{1}{2}}`, can be obtained by,

.. math::
    \frac{\partial \phi}{\partial x}\mid_{i + \frac{1}{2}} & \approx 
    (\Phi_k(x_{i+1}) - \Phi_k(x_i)) / h \\
    & = \phi^{\prime}(x_i)
        +\frac{\phi^{\prime \prime}(x_i)}{2}h
        +\frac{\phi^{\prime \prime \prime}(x_i)}{3 !}h^2 + \ldots

.. math::
    \frac{\partial \phi}{\partial x}\mid_{i - \frac{1}{2}} & \approx
    (\Phi_k(x_{i}) - \Phi_k(x_{i-1})) / h \\
    &= \phi^{\prime}(x_i) 
       - \frac{\phi^{\prime \prime}(x_i)}{2}h
       + \frac{\phi^{\prime \prime \prime}(x_i)}{3 !}h^2 + \ldots

Therefore,

.. math::
   :label: p2 

    \frac{\partial^2 \phi}{\partial x^2}\mid_{i} & \approx
    (\Phi_k(x_{i+1}) - \Phi_k(x_i) - \Phi_k(x_i) + \Phi_k(x_{i-1})) / h^2 \\
    &= (\phi^{\prime}(x_i)
       + \frac{\phi^{\prime \prime}(x_i)}{2}h
       + \frac{\phi^{\prime \prime \prime}(x_i)}{3 !}h^2
       - \phi^{\prime}(x_i) 
       + \frac{\phi^{\prime \prime}(x_i)}{2}h
       - \frac{\phi^{\prime \prime \prime}(x_i)}{3 !}h^2 + \ldots) / h \\
    &= (\phi^{(2)}(x_i) h + 2 \frac{\phi^{(4)}(x_i)}{4!} h^3 + \ldots) / h \\
    &= \phi^{(2)}(x_i)  + O(h^2) \\
    &= \phi^{(2)}(x_i)  + \frac{\phi^{(4)}(x_i)}{12} h^2 + O(h^4) \\
    &= \phi^{(2)}(x_i)  + \frac{h^2}{12} \phi^{(4)}(x_i) + \frac{h^4}{360} \phi^{(6)}(x_i) + O(h^6)

Let us introduce the operator :math:`\delta^2_x \phi` , which represents the central difference approximation to the second partial derivative of :math:`\phi` in the x-direction at grid point ijk corresponding to :math:`(x_i, y_j, z_k)`.

.. math::
   :label: delta2x 

    \frac{\partial^2 \phi}{\partial x^2} \mid _{ijk} = \delta^2_x \phi_{ijk} + O(h^2)

.. math::
   :label: delta2xdefine

    \delta^2_x \phi_{ijk} &= \frac{(\phi_{i+1,j,k} - \phi_{i,j,k}) / h - (\phi_{i,j,k} - \phi_{i-1,j,k}) / h }{h} \\
    &= \frac{\phi_{i+1,j,k} - 2 \phi_{i,j,k} + \phi_{i-1,j,k}}{h^2} 


Similar partial derivative of :math:`\phi` at grid point :math:`ijk` in y- and z- directions.

.. math::
   :label: delta2y 

    \frac{\partial^2 \phi}{\partial y^2} \mid _{ijk} = \delta^2_y \phi_{ijk} + O(h^2)

.. math::
   :label: delta2z

    \frac{\partial^2 \phi}{\partial z^2} \mid _{ijk} = \delta^2_z \phi_{ijk} + O(h^2)

Rewrite :eq:`delta2x` to :eq:`delta2z` include high order term in :eq:`p2`

.. math::
   :label: deltahx 

    \frac{\partial^2 \phi}{\partial x^2} \mid _{ijk} 
    = \delta^2_x \phi_{ijk} 
    + \frac{h^2}{12} \frac{\partial^4 \phi}{\partial x^4}_{ijk} 
    + \frac{h^4}{360} \frac{\partial^6 \phi}{\partial x^6}_{ijk}  + \ldots 

.. math::
   :label: deltahy 

    \frac{\partial^2 \phi}{\partial y^2} \mid _{ijk} = 
    \delta^2_y \phi_{ijk}  
    + \frac{h^2}{12} \frac{\partial^4 \phi}{\partial y^4}_{ijk} 
    + \frac{h^4}{360} \frac{\partial^6 \phi}{\partial y^6}_{ijk}  + \ldots 

.. math::
   :label: deltahz

    \frac{\partial^2 \phi}{\partial z^2} \mid _{ijk} = 
    \delta^2_z \phi_{ijk}  
    + \frac{h^2}{12} \frac{\partial^4 \phi}{\partial z^4}_{ijk} 
    + \frac{h^4}{360} \frac{\partial^6 \phi}{\partial z^6}_{ijk}  + \ldots 


Rewrite :eq:`poisson` into,

.. math::
    :label: poisson2

    \frac{\partial^2 \phi}{\partial x^2} + 
    \frac{\partial^2 \phi}{\partial y^2} + 
    \frac{\partial^2 \phi}{\partial z^2} = f

Substituting :eq:`deltahx` - :eq:`deltahz` into :eq:`poisson2`, we obtain the alternative form of :eq:`poisson2` including high order term.

.. math::
   :label: poissonh 

    \delta^2_x \phi_{ijk} &+ \delta^2_y \phi_{ijk} + \delta^2_z \phi_{ijk} \\ 
    &+ \frac{h^2}{12} (\frac{\partial^4 \phi}{\partial x^4}_{ijk} 
    +\frac{\partial^4 \phi}{\partial y^4}_{ijk} 
    +\frac{\partial^4 \phi}{\partial z^4}_{ijk})\\
    &+ \frac{h^4}{360} (\frac{\partial^6 \phi}{\partial x^6}_{ijk} 
    + \frac{\partial^6 \phi}{\partial y^6}_{ijk} 
    + \frac{\partial^6 \phi}{\partial z^6}_{ijk}) + O(h^6) \\
    &= f_{ijk} 

Define :math:`\tau_{ijk}` as truncation error in :eq:`poissonh`

.. math::
   :label: truncatione

    \tau_{ijk} &= \frac{h^2}{12} (\frac{\partial^4 \phi}{\partial x^4}_{ijk} 
    +\frac{\partial^4 \phi}{\partial y^4}_{ijk} 
    +\frac{\partial^4 \phi}{\partial z^4}_{ijk})\\
    &+ \frac{h^4}{360} (\frac{\partial^6 \phi}{\partial x^6}_{ijk} 
    + \frac{\partial^6 \phi}{\partial y^6}_{ijk} 
    + \frac{\partial^6 \phi}{\partial z^6}_{ijk})  + O(h^6) \\


Take the appropriate derivative of :eq:`poisson2` to write

.. math::
    :label: poisson4x

    \frac{\partial^4 \phi}{\partial x^4} + 
    \frac{\partial^4 \phi}{\partial x^2 y^2} + 
    \frac{\partial^4 \phi}{\partial x^2 z^2} = 
    \frac{\partial^2 f}{\partial x^2}

.. math::
    :label: poisson4y

    \frac{\partial^4 \phi}{\partial x^2 y^2} + 
    \frac{\partial^4 \phi}{\partial y^4} + 
    \frac{\partial^4 \phi}{\partial z^2 y^2} = 
    \frac{\partial^2 f}{\partial y^2}

.. math::
    :label: poisson4z

    \frac{\partial^4 \phi}{\partial x^2 z^2} + 
    \frac{\partial^4 \phi}{\partial y^2 z^2} + 
    \frac{\partial^4 \phi}{\partial z^4} = 
    \frac{\partial^2 f}{\partial z^2}

Substituting :eq:`poisson4x` - :eq:`poisson4z` into :eq:`truncatione`,

.. math::
   :label: truncatione2

    \tau_{ijk} &= \frac{h^2}{12} 
    \left( \frac{\partial^2 f}{\partial x^2} 
     + \frac{\partial^2 f}{\partial y^2} 
     + \frac{\partial^2 f}{\partial z^2} \right) _{ijk} \\ 
    & - \frac{h^2}{6} \left(  
       \frac{\partial^4 \phi}{\partial x^2 y^2}
      +\frac{\partial^4 \phi}{\partial y^2 z^2}
      +\frac{\partial^4 \phi}{\partial z^2 x^2}\right)_{ijk}\\
    &+ \frac{h^4}{360} \left( 
        \frac{\partial^6 \phi}{\partial x^6} 
      + \frac{\partial^6 \phi}{\partial y^6} 
      + \frac{\partial^6 \phi}{\partial z^6} \right)_{ijk}  + O(h^6) \\


2-Order Scheme
-------------------------------



Finite Difference Scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Finite Volume Scheme
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. math::

   \frac{1}{h} \sum_{d=0}^3\left(\left\langle\frac{\partial \phi}{\partial x_d}
   \right\rangle_{\mathbf{i}+\frac{1}{2} \mathbf{e}^d}-\left\langle\frac{\partial \phi}{\partial x_d}
   \right\rangle_{\mathbf{i}-\frac{1}{2} \mathbf{e}^d}\right)
    = \langle f\rangle_{\mathbf{i}}

.. math::
   :label: fvs 
   
   \frac{1}{h} \sum_{d=0}^3\left[\left\langle\frac{\partial \phi}{\partial x_d}\right\rangle\right]_{\mathbf{i}
   -\frac{1}{2} \mathbf{e}^d}^{\mathbf{i}+\frac{1}{2} \mathbf{e}^d}
    = \langle f\rangle_{\mathbf{i}}

Reference
------------

.. [Spotz1995] Spotz, W. F. (1995). High-order compact 
               finite difference schemes for computational mechanics. 
               The University of Texas at Austin.
